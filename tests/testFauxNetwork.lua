-- Load dependencies
local TransportLayer = require 'src/fauxNetwork/TransportLayer'
local createFauxNetwork = require 'src/fauxNetwork/createFauxNetwork'

-- Helper function that pretends time has passed (by updating 100 times per second)
function progressTime(seconds)
  for i = 1, 100 * seconds do
    TransportLayer:updateAll(1 / 100)
  end
end

describe('faux network', function()
  after_each(function()
    TransportLayer:removeAll()
  end)

  describe('the server', function()
    it('isn\'t listening for connections until startListening() is called', function()
      local server, clients = createFauxNetwork()
      assert.False(server:isListening())
      server:startListening()
      assert.True(server:isListening())
    end)
    it('stops listening for connections once stopListening() is called', function()
      local server, clients = createFauxNetwork()
      server:startListening()
      assert.True(server:isListening())
      server:stopListening()
      assert.False(server:isListening())
    end)
    it('keeps track of connected clients and exposes them through getClients()', function()
      local server, clients = createFauxNetwork({ numClients = 3 })
      server:startListening()
      assert.is.equal(0, #server:getClients())
      clients[1]:connect()
      assert.is.equal(1, #server:getClients())
      clients[2]:connect()
      assert.is.equal(2, #server:getClients())
      clients[3]:connect()
      assert.is.equal(3, #server:getClients())
      clients[3]:disconnect()
      assert.is.equal(2, #server:getClients())
      clients[1]:disconnect()
      assert.is.equal(1, #server:getClients())
      clients[2]:disconnect()
      assert.is.equal(0, #server:getClients())
    end)
    it('disconnects all currently-connected clients when disconnectAll() is called', function()
      local server, clients = createFauxNetwork()
      server:startListening()
      clients[1]:connect()
      assert.True(clients[1]:isConnected())
      server:disconnectAll('disconnect reason')
      assert.False(clients[1]:isConnected())
    end)
    it('triggers onStartListening() callbacks when the server starts listening for connections', function()
      local server, clients = createFauxNetwork()
      local callbackTriggered = false
      server:onStartListening(function(client) callbackTriggered = true end)
      assert.False(callbackTriggered)
      server:startListening()
      assert.True(callbackTriggered)
    end)
    it('triggers onStopListening() callbacks when the server stops listening for connections', function()
      local server, clients = createFauxNetwork()
      local callbackTriggered = false
      server:onStopListening(function(client) callbackTriggered = true end)
      server:startListening()
      assert.False(callbackTriggered)
      server:stopListening()
      assert.True(callbackTriggered)
    end)
    it('triggers onConnect() callbacks when a client connects', function()
      local server, clients = createFauxNetwork()
      local callbackTriggered = false
      server:onConnect(function(client) callbackTriggered = true end)
      server:startListening()
      assert.False(callbackTriggered)
      clients[1]:connect()
      assert.True(callbackTriggered)
    end)
    it('triggers onDisconnect() callbacks when a client disconnects', function()
      local server, clients = createFauxNetwork()
      local callbackTriggered = false
      server:onDisconnect(function(client, reason) callbackTriggered = true end)
      server:startListening()
      clients[1]:connect()
      assert.False(callbackTriggered)
      clients[1]:disconnect('disconnect reason')
      assert.True(callbackTriggered)
    end)
    it('triggers onReceive() callbacks when a message is received from a client', function()
      local server, clients = createFauxNetwork()
      local messageReceived
      server:onReceive(function(client, msg) messageReceived = msg end)
      server:startListening()
      clients[1]:connect()
      assert.is.falsy(messageReceived)
      clients[1]:send('test message from client')
      assert.is.equal('test message from client', messageReceived)
    end)
  end)
  describe('the client', function()
    it('can connect() to a listening server', function()
      local server, clients = createFauxNetwork()
      server:startListening()
      assert.False(clients[1]:isConnected())
      clients[1]:connect()
      assert.True(server:getClients()[1]:isConnected())
      assert.True(clients[1]:isConnected())
    end)
    it('triggers onConnect() callbacks when connecting to a server', function()
      local server, clients = createFauxNetwork()
      local callbackTriggered = false
      clients[1]:onConnect(function() callbackTriggered = true end)
      server:startListening()
      assert.False(callbackTriggered)
      clients[1]:connect()
      assert.True(callbackTriggered)
    end)
    it('triggers onDisconnect() callbacks when disconnecting from a server', function()
      local server, clients = createFauxNetwork()
      local callbackTriggered = false
      clients[1]:onDisconnect(function(reason) callbackTriggered = true end)
      server:startListening()
      clients[1]:connect()
      assert.False(callbackTriggered)
      clients[1]:disconnect('disconnect reason')
      assert.True(callbackTriggered)
    end)
    it('triggers onReceive() when a message is received from the server', function()
      local server, clients = createFauxNetwork()
      local messageReceived
      clients[1]:onReceive(function(msg) messageReceived = msg end)
      server:startListening()
      clients[1]:connect()
      assert.falsy(messageReceived)
      server:sendAll('test message from server')
      assert.is.equal('test message from server', messageReceived)
    end)
    it('triggers onSend() when the client sends a message', function()
      local server, clients = createFauxNetwork()
      local messageSent
      clients[1]:onSend(function(msg) messageSent = msg end)
      server:startListening()
      clients[1]:connect()
      assert.falsy(messageReceived)
      clients[1]:send('test message from client')
      assert.is.equal('test message from client', messageSent)
    end)
  end)
  describe('with latency', function()
    it('takes time for a connection request to be processed', function()
      local server, clients = createFauxNetwork({ latency = 1000 })
      -- Client sends a connection request
      server:startListening()
      clients[1]:connect()
      -- Request hasn't been received by the server yet
      assert.is.equal(0, #server:getClients())
      assert.False(clients[1]:isConnected())
      -- Server receives request and sends approval
      progressTime(1.05)
      assert.is.equal(0, #server:getClients())
      assert.False(clients[1]:isConnected())
      -- Client receives confirmation and is now connected
      progressTime(1.05)
      assert.is.equal(0, #server:getClients())
      assert.True(clients[1]:isConnected())
      -- Server is informed of the connection
      progressTime(1.05)
      assert.is.equal(1, #server:getClients())
      assert.True(clients[1]:isConnected())
    end)
    it('takes time for the client to receive a message', function()
      local server, clients = createFauxNetwork({ latency = 1000 })
      local messageReceived
      clients[1]:onReceive(function(msg) messageReceived = msg end)
      -- Client connects
      server:startListening()
      clients[1]:connect()
      progressTime(3.05)
      -- Server sends a message
      server:sendAll('test message from server')
      assert.is.falsy(messageReceived)
      -- Client receives the message
      progressTime(1.05)
      assert.is.equal('test message from server', messageReceived)
    end)
    it('takes time for the server to receive a message', function()
      local server, clients = createFauxNetwork({ latency = 1000 })
      local messageReceived
      server:onReceive(function(client, msg) messageReceived = msg end)
      -- Client connects
      server:startListening()
      clients[1]:connect()
      progressTime(3.05)
      -- Client sends a message
      clients[1]:send('test message from client')
      assert.is.falsy(messageReceived)
      -- Server receives the message
      progressTime(1.05)
      assert.is.equal('test message from client', messageReceived)
    end)
  end)
end)
