-- Load dependencies
local createFauxNetwork = require 'src/network/createFauxNetwork'

describe('faux network', function()
  randomize()

  -- Keep track of network vars
  local server, clients, transportLayers
  after_each(function()
    server, clients, transportLayers = nil, nil, nil
  end)

  -- Helper function that pretends time has passed (by updating 60 times per second)
  function progressTime(seconds)
    for i = 1, 60 * seconds do
      for _, transportLayer in ipairs(transportLayers) do
        transportLayer:update(1 / 60)
      end
    end
  end

  describe('the server', function()
    it('isn\'t listening for connections until startListening() is called', function()
      server, clients, transportLayers = createFauxNetwork()
      assert.False(server:isListening())
      server:startListening()
      assert.True(server:isListening())
    end)
    it('stops listening for connections once stopListening() is called', function()
      server, clients, transportLayers = createFauxNetwork()
      server:startListening()
      assert.True(server:isListening())
      server:stopListening()
      assert.False(server:isListening())
    end)
    it('keeps track of connected clients and exposes them through getClients()', function()
      server, clients, transportLayers = createFauxNetwork({ numClients = 3 })
      server:startListening()
      assert.is.equal(0, #server:getClients())
      clients[1]:connect()
      assert.is.equal(1, #server:getClients())
      clients[2]:connect()
      assert.is.equal(2, #server:getClients())
      clients[3]:connect()
      assert.is.equal(3, #server:getClients())
      clients[3]:disconnect()
      assert.is.equal(2, #server:getClients())
      clients[1]:disconnect()
      assert.is.equal(1, #server:getClients())
      clients[2]:disconnect()
      assert.is.equal(0, #server:getClients())
    end)
    it('can send data to the client when it connects', function()
      server, clients, transportLayers = createFauxNetwork()
      server.handleClientConnectAttempt = function(self, client, accept, reject)
        accept({ color = 'red' })
      end
      server:startListening()
      clients[1]:connect()
      assert.is.equal('red', clients[1].data.color)
    end)
    it('can reject clients that try to connect', function()
      server, clients, transportLayers = createFauxNetwork()
      server.handleClientConnectAttempt = function(self, client, accept, reject)
        reject('Test rejection message')
      end
      server:startListening()
      clients[1]:connect()
      assert.False(clients[1]:isConnected())
    end)
    it('disconnects all currently-connected clients when disconnectAll() is called', function()
      server, clients, transportLayers = createFauxNetwork()
      server:startListening()
      clients[1]:connect()
      assert.True(clients[1]:isConnected())
      server:disconnectAll('disconnect reason')
      assert.False(clients[1]:isConnected())
    end)
    it('triggers onStartListening() callbacks when the server starts listening for connections', function()
      server, clients, transportLayers = createFauxNetwork()
      local callbackTriggered = false
      server:onStartListening(function(client) callbackTriggered = true end)
      assert.False(callbackTriggered)
      server:startListening()
      assert.True(callbackTriggered)
    end)
    it('triggers onStopListening() callbacks when the server stops listening for connections', function()
      server, clients, transportLayers = createFauxNetwork()
      local callbackTriggered = false
      server:onStopListening(function(client) callbackTriggered = true end)
      server:startListening()
      assert.False(callbackTriggered)
      server:stopListening()
      assert.True(callbackTriggered)
    end)
    it('triggers onConnect() callbacks when a client connects', function()
      server, clients, transportLayers = createFauxNetwork()
      local callbackTriggered = false
      server:onConnect(function(client) callbackTriggered = true end)
      server:startListening()
      assert.False(callbackTriggered)
      clients[1]:connect()
      assert.True(callbackTriggered)
    end)
    it('triggers onDisconnect() callbacks when a client disconnects', function()
      server, clients, transportLayers = createFauxNetwork()
      local callbackTriggered = false
      server:onDisconnect(function(client, reason) callbackTriggered = true end)
      server:startListening()
      clients[1]:connect()
      assert.False(callbackTriggered)
      clients[1]:disconnect('disconnect reason')
      assert.True(callbackTriggered)
    end)
    it('triggers onReceive() callbacks when a message is received from a client', function()
      server, clients, transportLayers = createFauxNetwork()
      local messageReceived
      server:onReceive(function(client, msg) messageReceived = msg end)
      server:startListening()
      clients[1]:connect()
      assert.is.falsy(messageReceived)
      clients[1]:send('test message from client')
      assert.is.equal('test message from client', messageReceived)
    end)
  end)
  describe('the client', function()
    it('can connect() to a listening server', function()
      server, clients, transportLayers = createFauxNetwork()
      server:startListening()
      assert.False(clients[1]:isConnected())
      clients[1]:connect()
      assert.True(server:getClients()[1]:isConnected())
      assert.True(clients[1]:isConnected())
    end)
    it('is assigned a clientId from the server', function()
      server, clients, transportLayers = createFauxNetwork()
      server:startListening()
      clients[1]:connect()
      assert.is.equal(1, clients[1].clientId)
    end)
    it('triggers onConnect() callbacks when connecting to a server', function()
      server, clients, transportLayers = createFauxNetwork()
      local callbackTriggered = false
      clients[1]:onConnect(function() callbackTriggered = true end)
      server:startListening()
      assert.False(callbackTriggered)
      clients[1]:connect()
      assert.True(callbackTriggered)
    end)
    it('triggers onConnectFailure() callbacks when rejected by the server', function()
      server, clients, transportLayers = createFauxNetwork()
      server.handleClientConnectAttempt = function(self, client, accept, reject)
        reject('Test rejection message')
      end
      local rejectReason = nil
      clients[1]:onConnectFailure(function(reason) rejectReason = reason end)
      server:startListening()
      clients[1]:connect()
      assert.is.equal('Test rejection message', rejectReason)
    end)
    it('triggers onDisconnect() callbacks when disconnecting from a server', function()
      server, clients, transportLayers = createFauxNetwork()
      local callbackTriggered = false
      clients[1]:onDisconnect(function(reason) callbackTriggered = true end)
      server:startListening()
      clients[1]:connect()
      assert.False(callbackTriggered)
      clients[1]:disconnect('disconnect reason')
      assert.True(callbackTriggered)
    end)
    it('triggers onReceive() when a message is received from the server', function()
      server, clients, transportLayers = createFauxNetwork()
      local messageReceived
      clients[1]:onReceive(function(msg) messageReceived = msg end)
      server:startListening()
      clients[1]:connect()
      assert.falsy(messageReceived)
      server:sendAll('test message from server')
      assert.is.equal('test message from server', messageReceived)
    end)
  end)
  describe('with latency', function()
    it('takes time for a connection request to be processed', function()
      server, clients, transportLayers = createFauxNetwork({ latency = 1000 })
      -- Client sends a connection request
      server:startListening()
      clients[1]:connect()
      -- Request hasn't even been received by the server yet
      assert.is.equal(0, #server:getClients())
      assert.False(clients[1]:isConnected())
      -- Client and server have both recognized the connection
      progressTime(5.05)
      assert.is.equal(1, #server:getClients())
      assert.True(clients[1]:isConnected())
    end)
    it('takes time for the client to receive a message', function()
      server, clients, transportLayers = createFauxNetwork({ latency = 1000 })
      local messageReceived
      clients[1]:onReceive(function(msg) messageReceived = msg end)
      -- Client connects
      server:startListening()
      clients[1]:connect()
      progressTime(5.05)
      -- Server sends a message
      server:sendAll('test message from server')
      assert.is.falsy(messageReceived)
      -- Client receives the message
      progressTime(1.05)
      assert.is.equal('test message from server', messageReceived)
    end)
    it('takes time for the server to receive a message', function()
      server, clients, transportLayers = createFauxNetwork({ latency = 1000 })
      local messageReceived
      server:onReceive(function(client, msg) messageReceived = msg end)
      -- Client connects
      server:startListening()
      clients[1]:connect()
      progressTime(5.05)
      -- Client sends a message
      clients[1]:send('test message from client')
      assert.is.falsy(messageReceived)
      -- Server receives the message
      progressTime(1.05)
      assert.is.equal('test message from client', messageReceived)
    end)
  end)
  describe('with unreliability', function()
    it('the server has a chance of never receiving packets that are sent to it', function()
      server, clients, transportLayers = createFauxNetwork({ packetLossChance = 0.5 })
      local numMessagesReceived = 0
      server:onReceive(function(client, msg) numMessagesReceived = numMessagesReceived + 1 end)
      server:startListening()
      clients[1]:connect()
      for i = 1, 100 do
        clients[1]:send('test message from client')
      end
      assert.True(25 < numMessagesReceived and numMessagesReceived < 75)
    end)
    it('the client has a chance of never receiving packets that are sent to it', function()
      server, clients, transportLayers = createFauxNetwork({ packetLossChance = 0.5 })
      local numMessagesReceived = 0
      clients[1]:onReceive(function(client, msg) numMessagesReceived = numMessagesReceived + 1 end)
      server:startListening()
      clients[1]:connect()
      for i = 1, 100 do
        server:sendAll('test message from server')
      end
      assert.True(25 < numMessagesReceived and numMessagesReceived < 75)
    end)
    describe('with latency', function()
      it('the server has a chance of never receiving packets that are sent to it', function()
        server, clients, transportLayers = createFauxNetwork({ packetLossChance = 0.5, latency = 100 })
        local numMessagesReceived = 0
        server:onReceive(function(client, msg) numMessagesReceived = numMessagesReceived + 1 end)
        server:startListening()
        clients[1]:connect()
        progressTime(0.505)
        for i = 1, 100 do
          progressTime(0.105)
          clients[1]:send('test message from client')
        end
        progressTime(1.000)
        assert.True(25 < numMessagesReceived and numMessagesReceived < 75)
      end)
      it('the client has a chance of never receiving packets that are sent to it', function()
        server, clients, transportLayers = createFauxNetwork({ packetLossChance = 0.5, latency = 100 })
        local numMessagesReceived = 0
        clients[1]:onReceive(function(client, msg) numMessagesReceived = numMessagesReceived + 1 end)
        server:startListening()
        clients[1]:connect()
        progressTime(0.505)
        for i = 1, 100 do
          progressTime(0.105)
          server:sendAll('test message from server')
        end
        progressTime(1.000)
        assert.True(25 < numMessagesReceived and numMessagesReceived < 75)
      end)
    end)
  end)
  describe('without any unreliability', function()
    it('the server receives every packet sent to it', function()
      server, clients, transportLayers = createFauxNetwork()
      local numMessagesReceived = 0
      server:onReceive(function(client, msg) numMessagesReceived = numMessagesReceived + 1 end)
      server:startListening()
      clients[1]:connect()
      for i = 1, 100 do
        clients[1]:send('test message from client')
      end
      assert.is.equal(numMessagesReceived, 100)
    end)
    it('the client receives every packet sent to it', function()
      server, clients, transportLayers = createFauxNetwork()
      local numMessagesReceived = 0
      clients[1]:onReceive(function(client, msg) numMessagesReceived = numMessagesReceived + 1 end)
      server:startListening()
      clients[1]:connect()
      for i = 1, 100 do
        server:sendAll('test message from server')
      end
      assert.is.equal(numMessagesReceived, 100)
    end)
    describe('with latency', function()
      it('the server receives every packet sent to it', function()
        server, clients, transportLayers = createFauxNetwork({ latency = 100 })
        local numMessagesReceived = 0
        server:onReceive(function(client, msg) numMessagesReceived = numMessagesReceived + 1 end)
        server:startListening()
        clients[1]:connect()
        progressTime(0.505)
        for i = 1, 100 do
          progressTime(0.105)
          clients[1]:send('test message from client')
        end
        progressTime(1.000)
        assert.is.equal(numMessagesReceived, 100)
      end)
      it('the client receives every packet sent to it', function()
        server, clients, transportLayers = createFauxNetwork({ latency = 100 })
        local numMessagesReceived = 0
        clients[1]:onReceive(function(client, msg) numMessagesReceived = numMessagesReceived + 1 end)
        server:startListening()
        clients[1]:connect()
        progressTime(0.505)
        for i = 1, 100 do
          progressTime(0.105)
          server:sendAll('test message from server')
        end
        progressTime(1.000)
        assert.is.equal(numMessagesReceived, 100)
      end)
    end)
  end)
end)
